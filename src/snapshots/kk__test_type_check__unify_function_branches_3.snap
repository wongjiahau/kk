---
source: src/main.rs
expression: "type_check_source(\"\n            type Boolean = #true | #false\n            let result = \\\\(x: Boolean) => x.(\n                \\\\#true => 1\n                \\\\#false => 'yo'\n            )\n            \".trim().to_string())"
---
Err(
    UnifyError(
        FunctionReturnTypeMismatch {
            unify_error: TypeMismatch {
                location: Location {
                    source: NonFile {
                        env_name: "TESTING",
                    },
                    position: Position {
                        line_start: 3,
                        line_end: 3,
                        column_start: 17,
                        column_end: 31,
                    },
                },
                expected_type: Named {
                    name: "number",
                    arguments: [],
                },
                actual_type: Named {
                    name: "string",
                    arguments: [],
                },
            },
            expected_function_type: FunctionType {
                first_argument_type: Union(
                    UnionType {
                        tags: [
                            TagType {
                                tagname: "#true",
                                payload: None,
                            },
                            TagType {
                                tagname: "#false",
                                payload: None,
                            },
                        ],
                        bound: AtMost,
                        catch_all: false,
                    },
                ),
                rest_arguments_types: [],
                return_type: Named {
                    name: "number",
                    arguments: [],
                },
            },
            actual_function_type: FunctionType {
                first_argument_type: Union(
                    UnionType {
                        tags: [
                            TagType {
                                tagname: "#false",
                                payload: None,
                            },
                        ],
                        bound: AtLeast,
                        catch_all: false,
                    },
                ),
                rest_arguments_types: [],
                return_type: Named {
                    name: "string",
                    arguments: [],
                },
            },
            location: Location {
                source: NonFile {
                    env_name: "TESTING",
                },
                position: Position {
                    line_start: 3,
                    line_end: 3,
                    column_start: 17,
                    column_end: 31,
                },
            },
        },
    ),
)
