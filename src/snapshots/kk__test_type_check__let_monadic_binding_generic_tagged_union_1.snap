---
source: src/main.rs
expression: "type_check_source(\" \n            type Option<T> = #some(T) | #none\n            let add = \\\\(x: Option<number>) =>             \n                let #some(y) = x\n                y\n            \".to_string())"
---
Err(
    UnifyError(
        TypeMismatch {
            location: Location {
                source: NonFile {
                    env_name: "TESTING",
                },
                position: Position {
                    line_start: 4,
                    line_end: 4,
                    column_start: 17,
                    column_end: 17,
                },
            },
            expected_type: Union(
                UnionType {
                    tags: [
                        TagType {
                            tagname: "#some",
                            payload: Some(
                                Named {
                                    name: "number",
                                    arguments: [],
                                },
                            ),
                        },
                        TagType {
                            tagname: "#none",
                            payload: None,
                        },
                    ],
                    bound: AtMost,
                    catch_all: false,
                },
            ),
            actual_type: Named {
                name: "number",
                arguments: [],
            },
        },
    ),
)
