---
source: tests/test_runner.rs
expression: stripped_actual_output.trim()
---
============
INPUT
============
// Constraint with type variables

enum List<T> {
  Nil,
  Cons({head: T, tail: List<T>})
}

interface Equatable<T> {
  let equals: (left: T, right: T) => Boolean
}

enum Color {
  Red,
  Green,
}

implements Equatable<Color> {
  let equals = (left, right) =>
    switch ({left, right}) {
      case {left: Red, right: Red}: true
      case {left: Green, right: Green}: true
      case _: false
    }
}

let and = (left: Boolean, right: Boolean): Boolean =>
  switch {left, right} {
    case {left: true, right: true}:
      true
    case _:
      false
  }


let listEquals = <T where Equatable<T>>(left: List<T>, right: List<T>): Boolean => {
  switch ({left, right}) {
    case {left: Nil, right: Nil}:
      true

    case {left: Cons(left), right: Cons(right)}:
      left.head.equals(right.head).and(left.tail.listEquals(right.tail))

    case _:
      false
  }
}

let xs = Cons({head: Red, tail: Cons({head: Green, tail: Nil})})
let ys = Cons({head: Green, tail: Nil})

xs.listEquals(xs).print() // true
xs.listEquals(ys).print() // false

============
EXIT CODE
============
0

============
STDOUT
============
true
false

============
STDERR
============
