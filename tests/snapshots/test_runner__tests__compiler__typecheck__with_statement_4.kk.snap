---
source: tests/test_runner.rs
expression: stripped_actual_output.trim()
---
============
INPUT
============
let map = (x: Int, f: (n: Int) -> Int): [Int] -> [x.f()]

{
  with 0 = 123.map
     // Error, non-exhaustive pattern
  null
}

============
EXIT CODE
============
1

============
STDOUT
============


============
STDERR
============
error:
  ┌─ tests/compiler/typecheck/with_statement_4.kk:1:9
  │
1 │ let map = (x: Int, f: (n: Int) -> Int): [Int] -> [x.f()]
  │         ^ Syntax error: not expecting `=` here
  │
  = The expected token here is `:`.

    Note that `=` is used for declaring variables locally, for example:

    let x = 1.

    We found this error when we are trying to parse a Let Statement.
    Examples of Let Statement are:

    Example #1:

      let x : Integer = 1

    Example #2:

      let identity = <T>(t: T): T => t
