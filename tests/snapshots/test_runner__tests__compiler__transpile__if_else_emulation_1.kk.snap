---
source: tests/test_runner.rs
expression: stripped_actual_output.trim()
---
============
INPUT
============
type Bool =
  case true
  case false

type List<A> =
  case nil
  case cons #{ current: A, next: List<A> }

type Option<A> =
  case none
  case some(A)

let <A, B> (a : A) match (f : A -> B) : B = a f

let <A, B> (xs : List<A>) [find map] (f : A -> Option<B>) : Option<B> =
  xs match {
    case cons #{current, next} -> current f match {
      case some(o) -> some(o)
      case none -> next [find map] (f)
    }
    case nil -> none
  }

type Branch<A> = #{
  condition: () -> Bool,
  body: () -> A
}

let <A> (xs : List<A>) push (x : A) : List<A> =
  xs match {
    case nil -> cons #{current = x, next = nil}
    case cons #{current, next} -> cons #{current, next = next push (x)}
  }

let <A> if (condition : Bool) (body : () -> A) : List<Branch<A>> =
  nil push #{ condition = { condition }, body }

let <A> (branches: List<Branch<A>>) elif (condition: () -> Bool) (body: () -> A) : List<Branch<A>> =
  branches push #{ condition, body }

let <A> (branches: List<Branch<A>>) else (body: () -> A) : A =
  branches
    [find map] { branch ->
      branch .condition () match {
        case true ->
          some (branch .body ())

        case false ->
          none
      }
    }
    match {
      case some (body) -> body
      case none -> body ()
    }

let <A> (branches : List<Branch<A>>) end : Option<A> =
  branches [find map] { branch ->
    branch .condition () match {
      case true ->
        some (branch .body ())

      case false ->
        none
    }
  }

entry
  if (true) { "Hello world" print } else { "Bye" print }; // Hello world

  if (false) { "Hello world" print } elif { true } { "Mid" print } else { "Bye" print }; // Mid

  if (false) { "Hello world" print } elif { false } { "Mid" print } else { "Bye" print }; // Bye

  if (false) { 1 } end print; // none
  if (true) { 1 } end print // some(1)

============
EXIT CODE
============
0

============
STDOUT
============
Hello world
Mid
Bye
{ '$': 'none', _: null }
{ '$': 'some', _: 1 }

============
STDERR
============
