---
source: tests/test_runner.rs
expression: stripped_actual_output.trim()
---
============
INPUT
============
type Bool =
  case True
  case False

type List<A> =
  case Nil
  case Cons #{ current: A, next: List<A> }

type Option<A> =
  case None
  case Some(A)

let <A, B> (a : A) match (f : A -> B) : B = a f

let <A, B> (xs : List<A>) [find map] (f : A -> Option<B>) : Option<B> =
  xs match {
    case Cons #{current, next} -> current f match {
      case Some(o) -> Some(o)
      case None -> next [find map] (f)
    }
    case Nil -> None
  }

type Branch<A> = #{
  condition: () -> Bool,
  body: () -> A
}

let <A> (xs : List<A>) push (x : A) : List<A> =
  xs match {
    case Nil -> Cons #{current = x, next = Nil}
    case Cons #{current, next} -> Cons #{current, next = next push (x)}
  }

let <A> if (condition : Bool) (body : () -> A) : List<Branch<A>> =
  Nil push #{ condition = { condition }, body }

let <A> (branches: List<Branch<A>>) elif (condition: () -> Bool) (body: () -> A) : List<Branch<A>> =
  branches push #{ condition, body }

let <A> (branches: List<Branch<A>>) else (body: () -> A) : A =
  branches
    [find map] { branch ->
      branch .condition () match {
        case True ->
          Some (branch .body ())

        case False ->
          None
      }
    }
    match {
      case Some (body) -> body
      case None -> body ()
    }

let <A> (branches : List<Branch<A>>) end : Option<A> =
  branches [find map] { branch ->
    branch .condition () match {
      case True ->
        Some (branch .body ())

      case False ->
        None
    }
  }

entry
  if (True) { "Hello world" print } else { "Bye" print }; // Hello world

  if (False) { "Hello world" print } elif { True } { "Mid" print } else { "Bye" print }; // Mid

  if (False) { "Hello world" print } elif { False } { "Mid" print } else { "Bye" print }; // Bye

  if (False) { 1 } end print; // none
  if (True) { 1 } end print // some(1)

============
EXIT CODE
============
0

============
STDOUT
============
Hello world
Mid
Bye
{ '$': 'None', _: null }
{ '$': 'Some', _: 1 }

============
STDERR
============
