---
source: tests/test_runner.rs
expression: stripped_actual_output.trim()
---
============
INPUT
============
// Constraint with type variables
class List<T> = nil | cons { head : T, tail : List<T> }

class Color = red | green

class Boolean = true | false

let (left : Color) .equals (right : Color) : Boolean =
  { left, right } .
    -> { left = red, right = red } [ true ]
    -> { left = green, right = green } [ true ]
    -> _ [ false ]

let (left : Boolean) .and (right : Boolean) : Boolean =
  { left, right } .
    -> { left = true, right = true} [ true ]
    [ false ]

let<T> (left : List<T>) .equals (right : List<T>) : Boolean
  given { equals: T -> T -> Boolean }
  = (left, right) .
    -> (nil, nil) [ true ]

    -> (cons (left), cons (right)) [
      left .head .equals (right .head) .and (left .tail .equals (right .tail))
    ]

    [ false ]


entry
  let xs = cons { head = red, tail = cons { head = green, tail = nil } };
  let ys = cons { head = green, tail = nil };
  xs .equals (xs).print; // true
  xs .equals (ys).print // false

============
EXIT CODE
============
0

============
STDOUT
============
true
false

============
STDERR
============
