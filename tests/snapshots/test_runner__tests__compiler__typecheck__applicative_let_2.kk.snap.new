---
source: tests/test_runner.rs
expression: stripped_actual_output.trim()
---
============
INPUT
============
// Expects no error
enum Option<T> = Some(T) None

let map<A B>
  : | Option<A> | A => Option<B> => Option<B>
  = | Some(x) f => x.f
    | None _ => None

export let foo
  : | Option<{bar: String}> => Option<String>
  = | a =>
      let/map x = a
      Some(x.bar)

do Some({bar: "hello world"}).foo.print
do None.foo.print

============
EXIT CODE
============
1

============
STDOUT
============


============
STDERR
============
error:
  ┌─ tests/compiler/typecheck/applicative_let_2.kk:2:16
  │
2 │ enum Option<T> = Some(T) None
  │                ^ Syntax error: not expecting `=` here
  │
  = The expected token here is `{`.

    Note that `=` is used for declaring variables locally, for example:

    let x = 1.

    We found this error when we are trying to parse a Enum Statement.
    Examples of Enum Statement are:

    Example #1:

      enum Color = Red Green

    Example #2:

      enum List<A> = Nil() Cons({current: A next: List<A A>})
